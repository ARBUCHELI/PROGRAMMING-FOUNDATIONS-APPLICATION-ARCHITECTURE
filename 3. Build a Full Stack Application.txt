# 3. BUILD A FULL-STACK APPLICATION
-----------------------------------

* Components in a full-stack application
----------------------------------------

	* FRONT-END (CLIENT-SIDE)
	-------------------------
	. Handles the user interface and what the user interacts with


	* BACK-END (SERVER SIDE)
	------------------------
	. Processes user inputs, performs computations, and sends results back to the client


	COMMUNICATION BETWEEN FRONT-END AND BACK-END TYPICALLY HAPPENS OVER HTTP


	THE FRONTEND SENDS REQUESTS TO THE BACKEND USING API ENDPOINTS

		API ENDPONTS
		------------
		. Retrieving data
		. Saving new information
		. Updating existing records


	* TO-DO LIST APPLICATION
	------------------------
	Front-End				Back-End
	---------				--------
	. HTML					. Node.js
	. CSS					. API endpoints
	. JavaScript


	* NODEJS
	--------
	JAVASCRIPT RUNTIME THAT ENABLES
	-------------------------------
	. Server side JavaScript execution

	* EXPRESS
	---------
	. A framework that sits on top of NodeJS and simplifies handling HTTP requests and responses


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Run the to-do list application
--------------------------------
npm install

node app.js

http://localhost:3000


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Code walkthrough: To-do list application
------------------------------------------
	* Front End
	-----------
	index.html

	script.js --> Handles interactions with the backend

	styles.css


	* Back End
	----------
	app.js --> Endpoints connect the Front End with the Back End


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Incorporate a database for data persistence
---------------------------------------------
	* SQLITE
	--------
	Lightweight, file-based relational database that's easy to set up and use for SMALL TO MEDIUM-SIZED APPLICATIONS.

	Relational


	* We have one table with 3 columns (ID, name, completed).  

		. ID (primary key): unique identifier for each task in our table.

		. name (contents of the task).

		. completed (1 or 0).


	* INSTALLING SQLITE-3
	---------------------
	% npm install sqlite3


	% npm install better-sqlite3 for a more user-friendly interface


	* database.js --> Will handle database set up and interactions


database.js
-----------
const Database = require('better-sqlite3');
const db = new Database('tasks.db', { verbose: console.log });

db.exec(`
	CREATE TABLE IF NOT EXISTS tasks (
	id INTEGER PRIMARY KEY AUTOINCREMENT,
	name TEXT NOT NULL,
	completed INTEGER NOT NULL DEFAULT 0)`
	);

module.exports = db;


app.js
------
const express = require('express');
const db = require('./database');

const app = express();
const port = 3000;

//Add ability to parse JSON bodies
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// API Endpoint to get all tasks
app.get('/tasks', (req, res) => {
  const tasks = db.prepare('SELECT * FROM tasks').all();
  res.json(tasks);
});

// API Endpoint to add a new task
app.post('/tasks', (req, res) => {
  const { task } = req.body;
  if (task) {
    db.prepare('INSERT INTO tasks(name, completed) VALUES(?,?)').run(task, 0);
    res.status(201).json({ message: 'Task added successfully' });
  } else {
    res.status(400).json({ message: 'Task content is required' });
  }
});

// API Endpoint to delete a task
app.delete('/tasks/:id', (req, res) => {
  const taskId = parseInt(req.params.id, 10);
  db.prepare('DELETE FROM tasks WHERE id = ?').run(taskId);
  res.json({ message: 'Task deleted successfully' });
});

// API Endpoint to toggle task completion
app.put('/tasks/:id', (req, res) => {
  const taskId = parseInt(req.params.id, 10);
  const task = db.prepare('SELECT * FROM tasks WHERE id = ?').get(taskId);
  if (task) {
    const updatedStatus = task.completed == 0 ? 1 : 0;
    db.prepare('UPDATE tasks SET completed = ? WHERE id = ?').run(updatedStatus, taskId);
    res.json({ message: 'Task status updated successfully' });
  } else {
    res.status(404).json({ message: 'Task not found' });
  }
});

// Serve static files (HTML, CSS, JS)
app.use(express.static('public'));

// Start the server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});


-------------------------------------------------------------------------------------------------------------------------------------------------------------------





	



	

	
	


	

	





































































	
	































	