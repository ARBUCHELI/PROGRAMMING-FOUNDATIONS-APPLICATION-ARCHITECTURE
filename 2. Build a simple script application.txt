# 2. BUILD A SIMPLE SCRIPT APPLICATION
--------------------------------------

* Components in a simple script application
-------------------------------------------
	* TERMINAL
	----------
	A text-based interface used to interact with your computer's operating system


	* UI
	----
	The display of messages on the interface that guides users throught the game


	* GAME LOGIC
	------------
	Manages the flow of the game, including generating random numbers, processing user input, and determining the outcome of each guess


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Play the guess the number game
--------------------------------

* script.py
-----------
import random

def main():
    print("Welcome to the Guess the Number game!")

    # Generate a random number between 1 and 100
    number_to_guess = random.randint(1, 100)
    print("I have selected a number between 1 and 100.")
    
    while True:
        try:
            # Prompt the user to enter a guess
            guess = int(input("Can you guess the number? "))
            
            # Check if the guess is correct, too high, or too low
            if guess < number_to_guess:
                print("Too low! Try again.")
            elif guess > number_to_guess:
                print("Too high! Try again.")
            else:
                print("Congratulations! You guessed the number.")
                break  # Exit the loop if the guess is correct
        
        except ValueError:
            print("Invalid input. Please enter a valid number.")

if __name__ == "__main__":
    main()


------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Code walkthrough: Python guess the number game script
-------------------------------------------------------

* script.py
-----------
import random

def main():
    print("Welcome to the Guess the Number game!") ---> THIS SERVES AS OUR USER INTERFACE

    # Generate a random number between 1 and 100
    number_to_guess = random.randint(1, 100)
    print("I have selected a number between 1 and 100.")
    
    while True:
        try:
            # Prompt the user to enter a guess
            guess = int(input("Can you guess the number? "))
            
            # Check if the guess is correct, too high, or too low
            if guess < number_to_guess:
                print("Too low! Try again.")
            elif guess > number_to_guess:
                print("Too high! Try again.")
            else:
                print("Congratulations! You guessed the number.")
                break  # Exit the loop if the guess is correct
        
        except ValueError:
            print("Invalid input. Please enter a valid number.") ---> INPUT VALIDATION (PREVENTS FROM CRASHING)

if __name__ == "__main__":
    main()


-----------------------------------------------------------------------------------------------------------------------------------------------------------------

* Limitations of a simple script application
--------------------------------------------

* Simple Scripts
----------------
. Designed for small, specific tasks.
. Code is tightly coupled.
. Unit testing is harder.
. Don't support data persistance.

Understanding these limitations is key to understand when to move to more comprehensive application architectures.


* Difficult to:
---------------
. Handle more users.
. Larger data sets.
. More complex workflows.

Spaghetti code.

Scaling a script to meet these demands, typically requires refactoring the code, into a more modular, organized structure, often evolving into a multi-file or even multi-module application.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------

































	